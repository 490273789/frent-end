const printBinary = (number) => {
  let result = [];
  for (let i = 31; i >= 0; i--) {
    result += (number & (1 << i)) === 0 ? "0" : "1";
  }
  console.log("[ result ] >", result);
};

printBinary(6);

// 右移 >>
// 值为x
// 右移一位就是x / 2
// 右移 n 位 x / 2ⁿ
// 比如十进制的10 右移一位是 1，就是除 10， 2进制就是➗2

// 左移 <<
// 值为x
// 左移一位就是x * 2
// 左移 n 位 x * 2ⁿ

// 32位的二进制能表示多少位无符号数呢？
// 2 ^ 32
// 32位的二进制能表示的数字范围是多少？
// 2 ^ 32 -1

// 为啥要减1，因为正数时从0开始数，参考数组的index和长度的关系
// 32位的二进制能表示多少位有符号数呢？
// - 2³¹ ～ 2³¹
// 32位的二进制能表示数字的范围是多少？
// - 2³¹～ 2³¹ - 1

// 00 能表示多少位无符号 2²
// 00 - 0
// 01 - 1
// 10 - 2
// 11 - 3
// 00 能表示的数字范围是多少
// 2² - 1 = 3

// x 的取反 + 1 就是他的相反数

// 注意 32位的最小数字，取反+1是自己，0 取反 + 1也是自己 ，不知道为啥，取反+1自己走一遍
// 0 取反 + 1 是自己，所以0的相反是也是0

// 算法
// 1、有具体的问题
// 2、设计具体的流程去解决这个问题
// 3、有评价处理流程的可量化指标

// 01111 = 15
// 10000 = 16
